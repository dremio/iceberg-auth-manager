##
## Copyright (C) 2025 Dremio Corporation
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
name: Create Release

on:
  # Manually triggered
  workflow_dispatch:
    inputs:
      releaseFromBranch:
        description: "The branch name to release from, leave empty to release from latest commit on main."
        required: false
      bumpType:
        description: "Optional: bump patch, minor or major version (`patch`, `minor`, `none` for patch releases). Default is `minor`."
        required: true
        type: string
        default: "minor"

jobs:

  create-release:

    name: Create Release
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    if: github.repository == 'dremio/iceberg-auth-manager'
    env:
      RELEASE_FROM: ${{ github.event.inputs.releaseFromBranch }}
      BUMP_TYPE: ${{ github.event.inputs.bumpType }}
    permissions:
      contents: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_FROM }}
          fetch-depth: '0'

      - name: Set Up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true
          validate-wrappers: false

      - name: Configure Git
        run: |
          git config --global user.email "authmgr-release-workflow-noreply@dremio.com"
          git config --global user.name "AuthManager Release Workflow [bot]"

      - name: Bump to Release Version
        run: ./gradlew :bumpVersion --bumpType ${{ env.BUMP_TYPE }} --bumpToRelease

      - name: Get Release Version
        run: |
          RELEASE_VERSION=$(cat version.txt)
          LAST_TAG=$(git describe --abbrev=0 --tags --match=authmgr-*)
          
          echo "LAST_TAG=${LAST_TAG}" >> ${GITHUB_ENV}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> ${GITHUB_ENV}
          echo "GIT_TAG=authmgr-${RELEASE_VERSION}" >> ${GITHUB_ENV}
          
          cat <<! >> $GITHUB_STEP_SUMMARY
          ## About to release
          
          Version information right before the Git release tag and commit:
          
          | Name                    |                          Value |
          | ----------------------- | ------------------------------ |
          | Release version         | ${RELEASE_VERSION}             | 
          | Git tag name            | \`authmgr-${RELEASE_VERSION}\` | 
          | Previous Git tag        | \`${LAST_TAG}\`                | 
          | Release from branch     | ${RELEASE_FROM}                | 
          | Bump type               | ${BUMP_TYPE}                   |
          | Before release Git HEAD | \`$(git rev-parse HEAD)\`      |
          !

      - name: Record ${{ env.RELEASE_VERSION }} Release in Git
        run: |
          git commit -a -m "[release] release authmgr-${RELEASE_VERSION}"
          git tag -f -a -m "Release ${RELEASE_VERSION} from ${RELEASE_FROM} with bump-type ${BUMP_TYPE}" ${GIT_TAG}
          
          cat <<! >> $GITHUB_STEP_SUMMARY
          ## Release version information
          
          Version information after the Git release tag:
          
          | Name                    | Value                     |
          | ----------------------- | ------------------------- |
          | Release version         | ${RELEASE_VERSION}        | 
          | Git tag name            | \`${GIT_TAG}\`\           | 
          | Previous Git tag        | \`${LAST_TAG}\`           | 
          | Release from branch     | ${RELEASE_FROM}           | 
          | Bump type               | ${BUMP_TYPE}              |
          | Release Git HEAD        | \`$(git rev-parse HEAD)\` |
          !

      - name: Bump to Next Patch Version
        run: ./gradlew :bumpVersion --bumpType patch

      - name: Get Next Patch Version
        run: |
          NEXT_VERSION="$(cat version.txt)"
          echo "NEXT_VERSION=${NEXT_VERSION}" >> ${GITHUB_ENV}
          echo "NEXT_VERSION_NO_SNAPSHOT=${NEXT_VERSION%-SNAPSHOT}" >> ${GITHUB_ENV}

      - name: Next Version Information
        run: |
          cat <<! >> $GITHUB_STEP_SUMMARY
          ## Next development version information
          
          | Name                    | Value                     |
          | ----------------------- | ------------------------- |
          | Development version     | ${NEXT_VERSION}           |
          | \`version.txt\` content | \`$(cat version.txt)\`    |
          | Git HEAD                | \`$(git rev-parse HEAD)\` |
          !

      - name: Record Next Development Version In Git
        run: git commit -a -m "[release] next development iteration ${NEXT_VERSION}"

      - name: Push Tag + Branch
        run: |
          # Push directly using the remote repo URL, which includes the secret so this job can push to the repo
          UPSTREAM="https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"          
          git push --no-verify "${UPSTREAM}" HEAD:${GITHUB_REF} ${GIT_TAG}
