##
## Copyright (C) 2025 Dremio Corporation
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
name: Publish Release

on:
  push:
    tags:
      - authmgr-*

  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release tag name to re-release'
        required: true

jobs:

  prepare:
    name: Prepare Publish
    runs-on: ubuntu-24.04
    environment: release
    timeout-minutes: 10
    env:
      ARTIFACTS: build-artifacts
    permissions:
      contents: write

    steps:
      # GH doesn't provide just the tag name, so this step strips `/refs/tags/authmgr-` from `GITHUB_REF`
      # and provides the outputs for the Git tag and the release-version derived from it, in case of a manual run,
      # uses the input `releaseTag` as the input tag name.
      - name: Get Release Version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] ; then
            V="${GITHUB_REF/refs\/tags\/}"
          else
            V="${{ github.event.inputs.releaseTag }}"
          fi
          # check if tag matches patterns like authmgr-0.5, authmgr-0.10.4.3-alpha1, etc
          if [[ ${V} =~ ^authmgr-[0-9]+[.][0-9.]*[0-9](-[a-zA-Z0-9]+)?$ ]]; then
            echo "RELEASE_VERSION=${V/authmgr-}" >> ${GITHUB_ENV}
            echo "GIT_TAG=${V}" >> ${GITHUB_ENV}
          else
            echo "Tag must start with authmgr- followed by a valid version (got tag ${V}, ref is ${GITHUB_REF})"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'push' }}

      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          ref: refs/tags/${{ github.event.inputs.releaseTag }}

      - name: Set Up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true
          validate-wrappers: false

      - name: Prepare Artifacts Directory
        run: rm -rf "${ARTIFACTS}" ; mkdir -p "${ARTIFACTS}"

      - name: Gradle Build
        run: |
          # 2 Retries - due to Gradle's old and unfixed CME bug
          ./gradlew --no-scan compileAll jar || ./gradlew --no-scan compileAll jar || ./gradlew --no-scan compileAll jar

      - name: Collect Artifacts
        run: |
          mv tools/immutables/build/libs/authmgr-immutables-${RELEASE_VERSION}.jar "${ARTIFACTS}"
          mv tools/immutables/build/libs/authmgr-immutables-${RELEASE_VERSION}-javadoc.jar "${ARTIFACTS}"
          mv tools/immutables/build/libs/authmgr-immutables-${RELEASE_VERSION}-sources.jar "${ARTIFACTS}"
          mv oauth2/build/libs/authmgr-oauth2-${RELEASE_VERSION}.jar "${ARTIFACTS}"
          mv oauth2/build/libs/authmgr-oauth2-${RELEASE_VERSION}-javadoc.jar "${ARTIFACTS}"
          mv oauth2/build/libs/authmgr-oauth2-${RELEASE_VERSION}-sources.jar "${ARTIFACTS}"
          mv oauth2/build/libs/authmgr-oauth2-${RELEASE_VERSION}-runtime.jar "${ARTIFACTS}"

      - name: GitHub Login
        run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token

      - name: Create Release in GitHub
        run: gh release create ${GIT_TAG} --title "AuthManager ${RELEASE_VERSION}" ${ARTIFACTS}/*
